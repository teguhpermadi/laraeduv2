use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


$project = Project::inRandomOrder()->first();
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


$project = Project::inRandomOrder()->first();
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


$project = Project::inRandomOrder()->first();
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


$project = Project::inRandomOrder()->first();
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


$project = Project::get()->random();
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


$project = Project::get()->random();
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


$project = Project::get()->random();
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


$project = Project::get()->random();
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


$project = Project::get()->random();
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


$project = Project::with('projectTarget')->get()->random();
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


$project = Project::with('projectTarget', 'studentGrade')->get()->random();
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


$project = Project::with('projectTarget', 'grade')->get()->random();
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

$project = Project::with('projectTarget', 'grade')->get()->random();

return [
  'academic_year_id'  => $project->academic_year_id,
  'student_id'        => $project->grade->students->random()->id,
  'project_target_id' => $project->projectTarget->id,
  'score'             => LinkertScaleEnum::getRandomValue(),
];
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


        $project = Project::with('projectTarget', 'grade')->get()->random();
        $student = $project->grade->students->random();

        return [
            'academic_year_id'  => $project->academic_year_id,
            'student_id'        => $student->id,
            'project_target_id' => $project->projectTarget->id,
            'score'             => LinkertScaleEnum::getRandomValue(),
        ];
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


        $project = Project::with('projectTarget', 'grade')->get()->random();
        $student = $project->grade->students->random();

        return [
            'academic_year_id'  => $project->academic_year_id,
            'student_id'        => $student->id,
            'project_target_id' => $project->projectTarget->id,
            'score'             => LinkertScaleEnum::getRandomValue(),
        ];
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


        $project = Project::with('projectTarget', 'grade')->get()->random();
        $student = $project->grade->students->random()->id;

        return [
            'academic_year_id'  => $project->academic_year_id,
            'student_id'        => $student->id,
            'project_target_id' => $project->projectTarget->id,
            'score'             => LinkertScaleEnum::getRandomValue(),
        ];
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


        $project = Project::with('projectTarget', 'grade')->get()->random();
        $student = $project->grade->students->random()->id;

        return [
            'academic_year_id'  => $project->academic_year_id,
            'student_id'        => $student->id,
            'project_target_id' => $project->projectTarget->id,
            'score'             => LinkertScaleEnum::getRandomValue(),
        ];
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


        $project = Project::with('projectTarget', 'grade')->get()->random();
        $student = $project->grade->students;

        return [
            'academic_year_id'  => $project->academic_year_id,
            'student_id'        => $student->id,
            'project_target_id' => $project->projectTarget->id,
            'score'             => LinkertScaleEnum::getRandomValue(),
        ];
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


        $project = Project::with('projectTarget', 'grade')->get()->random();
        $student = $project->grade->students;

        return [
            'academic_year_id'  => $project->academic_year_id,
            'student_id'        => $student,
            'project_target_id' => $project->projectTarget->id,
            'score'             => LinkertScaleEnum::getRandomValue(),
        ];
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


        $project = Project::with('projectTarget', 'grade')->get()->random();
        $student = $project->grade->students;

        return [
            'academic_year_id'  => $project->academic_year_id,
            'student_id'        => $student,
            'project_target_id' => $project->projectTarget,
            'score'             => LinkertScaleEnum::getRandomValue(),
        ];
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


        $project = Project::with('projectTarget', 'grade')->get()->random();
        $student = $project->grade->students;
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


        $project = Project::with('projectTarget', 'grade')->get()->random();
        $student = $project->grade->student;
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


        $project = Project::with('projectTarget', 'grade')->get()->random();
        $student = $project->grade->student;
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


        $project = Project::with('projectTarget', 'grade')->get()->random();
        $student = $project->grade->student;
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


        $project = Project::with('projectTarget', 'grade')->get()->random();
        $student = $project->grade->student;
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


        $project = Project::with('projectTarget', 'grade')->get()->random();
        $student = $project->grade->student;
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


        $project = Project::with('projectTarget', 'grade')->get()->random();
        $student = $project->grade->student;
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


        $project = Project::with('projectTarget', 'grade')->get()->random();
        $student = $project->grade->student;
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


        $project = Project::with('projectTarget', 'grade')->get()->random();
        $student = $project->grade->student;
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


        $project = Project::with('projectTarget', 'grade')->get()->random();
        $student = $project->grade->studentGrade;
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


        $project = Project::with('projectTarget', 'grade')->get()->random();
        $student = $project->grade->studentGrade->random()->id;
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


        $project = Project::with('projectTarget', 'grade')->get()->random();
        $student = $project->grade->studentGrade;
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


        $project = Project::with('projectTarget', 'grade')->get()->random();
        $student = $project->grade->studentGrade->student;
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


        $project = Project::with('projectTarget', 'grade')->get()->random();
        $student = $project->grade->studentGrade;
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


$project = Project::with('projectTarget', 'grade')->get()->random();

$project
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

$projects = Project::with('projectTarget', 'grade')->get();

$data = [];
foreach ($projects as $project) {
  $students = $project->grade->studentGrade;
  foreach ($students as $student) {
	$data[] = [
	  'academic_year_id' => $project->academic_year_id,
	  'student_id' => $student->student_id,
	  'project_target_id' => $project->projectTarget->id,
	  'score' => LinkertScaleEnum::getRandomValue(),
	];
  }
}
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

$projects = Project::with('projectTarget', 'grade')->get();

$data = [];
foreach ($projects as $project) {
  $students = $project->grade->studentGrade;
  foreach ($students as $student) {
	$data[] = [
	  'academic_year_id' => $project->academic_year_id,
	  'student_id' => $student->student_id,
	  'project_target_id' => $project->projectTarget->id,
	  'score' => LinkertScaleEnum::getRandomValue(),
	];
  }
}
$data;
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

$projects = Project::with('projectTarget', 'grade')->get();

$data = [];
foreach ($projects as $project) {
  $students = $project->grade->studentGrade;
  foreach ($students as $student) {
	$data[] = [
	  'academic_year_id' => $project->academic_year_id,
	  'student_id' => $student->student_id,
	  'project_target_id' => $project->projectTarget,
	  'score' => LinkertScaleEnum::getRandomValue(),
	];
  }
}
$data;
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

        $target = Target::with('dimention', 'element.value.subValue', 'subElement')->get()->random();
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

$target = Target::with('dimention', 'element.value.subValue', 'subElement')->get()->random();
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

$target = Target::with('dimention', 'element.value.subValue', 'subElement')->get()->random();
$value = $target->element->value->first();
$subValue = $value->subValue->first();
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

$target = Target::with('dimention', 'element.value.subValue', 'subElement')->get()->random();
$value = $target->element->value->first();
$subValue = $value->subValue->first();

ProjectTarget::factory(2)->make();
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

Student::get()
Student::with('studentProject')->get()
Student::with('project')->get()
Student::with('project')->get()
Student::with('project')->get()
Student::with('project')->get()
Student::with('project')->first()
Student::with('project.projectTarget')->first()
Student::with('project.projectTarget.project')->first()

Project::get()

Project::with('projectTarget')->get()

Project::with('projectTarget.student')->get()

Project::with('projectTarget.studentProject')->get()
Student::with('project.projectTarget.project')->find(2)
Project::factory(5)->state([
            'teacher_id' => Teacher::get()->random()->id,
        ])->make();
Project::factory(5)->state([
            'teacher_id' => 1,
        ])->make();
Project::factory(5)->state([
            'teacher_id' => 1,
        ])->make();
$teacherGrade = TeacherGrade::get();

        foreach ($teacherGrade as $teacher) {
            Project::factory(1)->state([
                'teacher_id' => $teacher->teacher_id,
            ])->make();
        }
$teacherGrade = TeacherGrade::get();

        foreach ($teacherGrade as $teacher) {
            $data = Project::factory(1)->state([
                'teacher_id' => $teacher->teacher_id,
            ])->make();
        }

$data;
$teacherGrade = TeacherGrade::get();

        foreach ($teacherGrade as $teacher) {
            $data[] = Project::factory(1)->state([
                'teacher_id' => $teacher->teacher_id,
            ])->make();
        }

$data;
$target = Target::with('dimention', 'element.value.subValue', 'subElement')->get()->random();
$value = $target->element->value->first();
$subValue = $value->subValue->first();

for ($i=0; $i < 10; $i++) { 
  $data[] = [
	'project_id' => Project::get()->random()->id,
	'phase' => $target->phase,
	'dimention_id' => $target->dimention->first()->id,
	'element_id' => $target->element->first()->id,
	'sub_element_id' => $target->subElement->first()->id,
	'value_id' => $value->first()->id,
	'sub_value_id' => $subValue->first()->id,
	'target_id' => $target->id,
  ];
}

$data;
$target = Target::with('dimention', 'element.value.subValue', 'subElement')->get()->random();
$value = $target->element->value->first();
$subValue = $value->subValue->first();

for ($i=0; $i < 10; $i++) { 
  $data[] = [
	'project_id' => Project::get()->random()->id,
	'phase' => $target->phase,
	'dimention_id' => $target->dimention->first()->id,
	'element_id' => $target->element->first()->id,
	'sub_element_id' => $target->subElement->first()->id,
	'value_id' => $value->first()->id,
	'sub_value_id' => $subValue->first()->id,
	'target_id' => $target->id,
  ];
}

$data;
$target = Target::with('dimention', 'element.value.subValue', 'subElement')->get()->random();
$value = $target->element->value->first();
$subValue = $value->subValue->first();

for ($i=0; $i < 10; $i++) { 
  $data[] = [
	'project_id' => Project::get()->random()->id,
	'phase' => $target->phase,
	'dimention_id' => $target->dimention->first()->id,
	'element_id' => $target->element->first()->id,
	'sub_element_id' => $target->subElement->first()->id,
	'value_id' => $value->first()->id,
	'sub_value_id' => $subValue->first()->id,
	'target_id' => $target->id,
  ];
}

$data;
$target = Target::with('dimention', 'element.value.subValue', 'subElement')->get()->random();
$value = $target->element->value->first();
$subValue = $value->subValue->first();

for ($i=0; $i < 10; $i++) { 
  $data[] = [
	
	'phase' => $target->phase,
	'dimention_id' => $target->dimention->first()->id,
	'element_id' => $target->element->first()->id,
	'sub_element_id' => $target->subElement->first()->id,
	'value_id' => $value->first()->id,
	'sub_value_id' => $subValue->first()->id,
	'target_id' => $target->id,
  ];
}

$data;
$target = Target::with('dimention', 'element.value.subValue', 'subElement')->get()->random();
        $value = $target->element->value->first();
        $subValue = $value->subValue->first();
        $project_id = Project::get()->random();

        for ($i=0; $i < 10; $i++) { 
            $data[] = [
                'project_id' => $project_id->id,
                'phase' => $target->phase,
                'dimention_id' => $target->dimention->first()->id,
                'element_id' => $target->element->first()->id,
                'sub_element_id' => $target->subElement->first()->id,
                'value_id' => $value->first()->id,
                'sub_value_id' => $subValue->first()->id,
                'target_id' => $target->id,
            ];
        }
$target = Target::with('dimention', 'element.value.subValue', 'subElement')->get()->random();
        $value = $target->element->value->first();
        $subValue = $value->subValue->first();
        $project_id = Project::get()->random();

        for ($i=0; $i < 10; $i++) { 
            $data[] = [
                'project_id' => $project_id->id,
                'phase' => $target->phase,
                'dimention_id' => $target->dimention->first()->id,
                'element_id' => $target->element->first()->id,
                'sub_element_id' => $target->subElement->first()->id,
                'value_id' => $value->first()->id,
                'sub_value_id' => $subValue->first()->id,
                'target_id' => $target->id,
            ];
        }
$project_id = Project::get()->random();
$project_id = Project::get()->random();
$project_id = Project::get()->random();
$project_id = Project::get()->random();
$project_id = Project::get()->random();
$project_id = Project::get()->random();
$project_id = Project::get()->random();
$project_id = Project::get()->random()->id;
$project_id = Project::get()->random();
$project_id = Project::get();
$project_id = Project::get();
$project_id = Project::get();
$project_id = Project::get();
$project_id = Project::get();
$project_id = Project::get();
$project_id = Project::get();
$project_id = Project::get();
$project_id = Project::get();
$project_id = Project::get();
$project_id = Project::get();
$project_id = Project::get();
$teacherGrade = TeacherGrade::get();

        foreach ($teacherGrade as $teacher) {
            Project::factory(1)->state([
                'teacher_id' => $teacher->teacher_id,
            ])->create();
        }
Project::get()
Project::get();
$teacherGrade = TeacherGrade::get();

foreach ($teacherGrade as $teacher) {
  $data[] = Project::factory(1)->state([
	'teacher_id' => $teacher->teacher_id,
  ])->make();
}

$data;
$teacherGrade = TeacherGrade::get();

$data = [];
foreach ($teacherGrade as $teacher) {
  $data[] = Project::factory(1)->state([
	'teacher_id' => $teacher->teacher_id,
  ])->make();
}

$data;
$teacherGrade = TeacherGrade::get();

$data = [];
foreach ($teacherGrade as $teacher) {
  $data[] = Project::factory()->state([
	'teacher_id' => $teacher->teacher_id,
  ])->make();
}

$data;
$teacherGrade = TeacherGrade::get();

$data = [];
foreach ($teacherGrade as $teacher) {
  $data[] = Project::factory()->state([
	'teacher_id' => $teacher->teacher_id,
  ])->make();
}

$data;
$teacherGrade = TeacherGrade::get();

$data = [];
foreach ($teacherGrade as $teacher) {
  $data[] = Project::factory()->state([
	'teacher_id' => $teacher->teacher_id,
  ])->make();
}

$data;
$teacherGrade = TeacherGrade::get();

$data = [];
foreach ($teacherGrade as $teacher) {
  $data[] = Project::factory()->state([
	'teacher_id' => $teacher->teacher_id,
  ])->make();
}

$data;
$teacherGrade = TeacherGrade::get();

$data = [];
foreach ($teacherGrade as $teacher) {
  $data[] = Project::factory()->state([
	'teacher_id' => $teacher->teacher_id,
  ])->make();
}

$data;
$teacherGrade = TeacherGrade::get();

$data = [];
foreach ($teacherGrade as $teacher) {
  $data[] = Project::factory()->state([
	'teacher_id' => $teacher->teacher_id,
  ])->make();
}

$data;
$teacherGrade = TeacherGrade::get();

$data = [];
foreach ($teacherGrade as $teacher) {
  $data[] = Project::factory()->state([
	'teacher_id' => $teacher->teacher_id,
  ])->make();
}

$data;
$teacherGrade = TeacherGrade::get();

$data = [];
foreach ($teacherGrade as $teacher) {
  $data[] = Project::factory()->state([
	'teacher_id' => $teacher->teacher_id,
  ])->make();
}

$data;
$teacherGrade = TeacherGrade::get();

$data = [];
foreach ($teacherGrade as $teacher) {
  $data[] = Project::factory()->state([
	'teacher_id' => $teacher->teacher_id,
  ])->make();
}

$data;
$teacherGrade = TeacherGrade::get();

$data = [];
foreach ($teacherGrade as $teacher) {
  $data[] = Project::factory()->state([
	'teacher_id' => $teacher->teacher_id,
  ])->make();
}

$data;
$teacherGrade = TeacherGrade::get();

$data = [];
foreach ($teacherGrade as $teacher) {
  $data[] = Project::factory()->state([
	'teacher_id' => $teacher->teacher_id,
  ])->make();
}

$data;
$teacherGrade = TeacherGrade::get();

$data = [];
foreach ($teacherGrade as $teacher) {
  $data[] = Project::factory()->state([
	'teacher_id' => $teacher->teacher_id,
  ])->make();
}

$data;
$teacherGrade = TeacherGrade::get();

$data = [];
foreach ($teacherGrade as $teacher) {
  $data[] = Project::factory()->state([
	'teacher_id' => $teacher->teacher_id,
  ])->make();
}

$data;
$teacherGrade = TeacherGrade::get();

$data = [];
foreach ($teacherGrade as $teacher) {
  $data[] = Project::factory()->make();
}

$data;
$teacherGrade = TeacherGrade::get();

$data = [];
foreach ($teacherGrade as $teacher) {
  $data[] = Project::factory()->make();
}

$data;
$teacherGrade = TeacherGrade::get();

$data = [];
foreach ($teacherGrade as $teacher) {
  $data[] = Project::factory()->make();
}

$data;
$teacherGrade = TeacherGrade::get();

$data = [];
foreach ($teacherGrade as $teacher) {
  $data[] = Project::factory()->make();
}

$data;
$teacherGrade = TeacherGrade::get();

$data = [];
foreach ($teacherGrade as $teacher) {
  $data[] = Project::factory()->make();
}
Project::factory()->make();
$data;
Project::factory()->make();
Project::factory()->make();
Project::factory()->make();
Project::factory()->make();
TeacherGrade::get();
Project::get()
