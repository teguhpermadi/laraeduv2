use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Models\StudentCompetency;

PhaseEnum::cases()[array_rand(PhaseEnum::cases())]
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

PhaseEnum::cases()[array_rand(PhaseEnum::cases())]
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

PhaseEnum::cases()[array_rand(PhaseEnum::cases())]->name
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

PhaseEnum::cases()[array_rand(PhaseEnum::cases())]->name
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

Grade::get()
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

PhaseEnum::cases()[array_rand(PhaseEnum::cases())]->value
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

        $projects = Project::factory()->count(10)->make();
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


$target = Target::get()->random()->id;
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


$target = Target::get()->random();
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


$target = Target::get()->with('dimention', 'element', 'subElement')->random();
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


$target = Target::get()->with('dimention', 'element', 'subElement')->get();
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


$target = Target::get()->with('dimention', 'element', 'subElement')->get();
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;
use App\Models\Target;


$target = Target::get()->with('dimention', 'element', 'subElement')->get();
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;
use App\Models\Target;


$target = Target::get()->with('dimention')->get();
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;
use App\Models\Target;


$target = Target::get()->get();
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;


$target = Target::with('dimention', 'element', 'subElement')->get();
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

$projects = Project::factory()->count(10)->make();

foreach ($projects as $project) {
  $target = Target::get()->random()->id;

  $data = [
	'project_id' => $project->id,
	'phase' => $project->phase,
	'dimention_id' => $target->dimention_id,
	'element_id' => $target->element_id,
	'sub_element_id' => $target->sub_element_id,
	'value_id' => $target->value_id,
	'sub_value_id' => $target->sub_value_id,
	'target_id' => $target->id,
  ];
}
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

$projects = Project::factory()->count(10)->make();

foreach ($projects as $project) {
  $target = Target::get()->random()->id;

  $data = [
	'project_id' => $project->id,
	'phase' => $project->phase,
	'dimention_id' => $target->dimention_id,
	'element_id' => $target->element_id,
	'sub_element_id' => $target->sub_element_id,
	'value_id' => $target->value_id,
	'sub_value_id' => $target->sub_value_id,
	'target_id' => $target->id,
  ];
}

$data;
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

$projects = Project::factory()->count(10)->make();

foreach ($projects as $project) {
  $target = Target::get()->random()->id;

  $data = [
	'project_id' => $project->id,
	'phase' => $project->phase,
	'dimention_id' => $target->dimention->id,
	'element_id' => $target->element->id,
	'sub_element_id' => $target->sub_element->id,
	'value_id' => $target->value->id,
	'sub_value_id' => $target->sub_value->id,
	'target_id' => $target->id,
  ];
}

$data;
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

$projects = Project::factory()->count(10)->make();

foreach ($projects as $project) {
  $target = Target::with('dimention')->get()->random()->id;

  $data = [
	'project_id' => $project->id,
	'phase' => $project->phase,
	'dimention_id' => $target->dimention->id,
	'element_id' => $target->element->id,
	'sub_element_id' => $target->sub_element->id,
	'value_id' => $target->value->id,
	'sub_value_id' => $target->sub_value->id,
	'target_id' => $target->id,
  ];
}

$data;
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

$projects = Project::factory()->count(10)->make();

foreach ($projects as $project) {
  $target = Target::with('dimention')->get()->random()->id;

  $data = [
	'project_id' => $project->id,
	'phase' => $project->phase,
	'dimention_id' => $target->dimention->id,
	'element_id' => $target->element->id,
	'sub_element_id' => $target->sub_element->id,
	'value_id' => $target->value->id,
	'sub_value_id' => $target->sub_value->id,
	'target_id' => $target->id,
  ];
}

$data;
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

$projects = Project::factory()->count(10)->make();

foreach ($projects as $project) {
  $target = Target::with('dimention')->get()->random()->id;

  $data = [
	'project_id' => $project->id,
	'phase' => $project->phase,
	'dimention_id' => $target->dimention->id,
	'element_id' => $target->element->id,
	'sub_element_id' => $target->sub_element->id,
	'value_id' => $target->value->id,
	'sub_value_id' => $target->sub_value->id,
	'target_id' => $target->id,
  ];
}

$data;
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

$projects = Project::factory()->count(10)->make();

foreach ($projects as $project) {
  $target = Target::with('dimention')->get()->random()->id;

  $data = [
	'project_id' => $project->id,
	'phase' => $project->phase,
	'dimention_id' => $target->dimention->id,
	'element_id' => $target->element->id,
	'sub_element_id' => $target->sub_element->id,
	'value_id' => $target->value->id,
	'sub_value_id' => $target->sub_value->id,
	'target_id' => $target->id,
  ];
}

$data;
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

$projects = Project::factory()->count(10)->make();

foreach ($projects as $project) {
  $target = Target::with('dimention')->get()->random()->id;

  $data = [
	'project_id' => $project->id,
	'phase' => $project->phase,
	'dimention_id' => $target->dimention->id,
	'element_id' => $target->element->id,
	'sub_element_id' => $target->sub_element->id,
	'value_id' => $target->value->id,
	'sub_value_id' => $target->sub_value->id,
	'target_id' => $target->id,
  ];
}

$data;
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

$projects = Project::factory()->count(10)->make();

foreach ($projects as $project) {
  $target = Target::with('dimention')->get()->random()->id;

  $data = [
	'project_id' => $project->id,
	'phase' => $project->phase,
	'dimention_id' => $target->dimention->id,
	'element_id' => $target->element->id,
	'sub_element_id' => $target->sub_element->id,
	'value_id' => $target->value->id,
	'sub_value_id' => $target->sub_value->id,
	'target_id' => $target->id,
  ];
}

$data;
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

$projects = Project::factory()->count(10)->make();

foreach ($projects as $project) {
  $target = Target::with('dimention', 'element', 'subElement')->get()->random()->id;

  $data = [
	'project_id' => $project->id,
	'phase' => $project->phase,
	'dimention_id' => $target->dimention->id,
	'element_id' => $target->element->id,
	'sub_element_id' => $target->sub_element->id,
	'value_id' => $target->value->id,
	'sub_value_id' => $target->sub_value->id,
	'target_id' => $target->id,
  ];
}

$data;
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

$projects = Project::factory()->count(10)->make();

$target = Target::with('dimention', 'element', 'subElement')->get()->random()->id;
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

$projects = Project::factory()->count(10)->make();

$target = Target::with('dimention', 'element', 'subElement')->get()->random();
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

$projects = Project::factory()->count(10)->make();

foreach ($projects as $project) {
  $target = Target::with('dimention', 'element', 'subElement')->get()->random();

  $data = [
	'project_id' => $project->id,
	'phase' => $project->phase,
	'dimention_id' => $target->dimention->id,
	'element_id' => $target->element->id,
	'sub_element_id' => $target->sub_element->id,
	'value_id' => $target->value->id,
	'sub_value_id' => $target->sub_value->id,
	'target_id' => $target->id,
  ];
}

$data;
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

$projects = Project::factory()->count(10)->make();

foreach ($projects as $project) {
  $target = Target::with('dimention', 'element', 'subElement')->get()->random();

  $data = [
	'project_id' => $project->id,
	'phase' => $project->phase,
	'dimention_id' => $target->dimention->id,
	'element_id' => $target->element->id,
	'sub_element_id' => $target->subElement->id,
	'value_id' => $target->value->id,
	'sub_value_id' => $target->sub_value->id,
	'target_id' => $target->id,
  ];
}

$data;
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

$projects = Project::factory()->count(10)->make();

foreach ($projects as $project) {
  $target = Target::with('dimention', 'element.value.subValue', 'subElement')->get()->random();

  $data = [
	'project_id' => $project->id,
	'phase' => $project->phase,
	'dimention_id' => $target->dimention->id,
	'element_id' => $target->element->id,
	'sub_element_id' => $target->subElement->id,
	'value_id' => $target->element->value->id,
	'sub_value_id' => $target->element->value->subValue->id,
	'target_id' => $target->id,
  ];
}

$data;
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

$projects = Project::factory()->count(10)->make();

foreach ($projects as $project) {
  $target = Target::with('dimention', 'element.value.subValue', 'subElement')->get()->random();

  $data = [
	'project_id' => $project->id,
	'phase' => $project->phase,
	'dimention_id' => $target->dimention->id,
	'element_id' => $target->element->id,
	'sub_element_id' => $target->subElement->id,
	'value_id' => $target->element->value->id,
	
	'target_id' => $target->id,
  ];
}

$data;
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

$projects = Project::factory()->count(10)->make();

foreach ($projects as $project) {
  $target = Target::with('dimention', 'element.value.subValue', 'subElement')->get()->random();

  $data = [
	'project_id' => $project->id,
	'phase' => $project->phase,
	'dimention_id' => $target->dimention->id,
	'element_id' => $target->element->id,
	'sub_element_id' => $target->subElement->id,
	
	
	'target_id' => $target->id,
  ];
}

$data;
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

$target = Target::with('dimention', 'element.value.subValue', 'subElement')
  ->get()
  ->random();
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

$target = Target::with('dimention', 'element.value.subValue', 'subElement')
  ->get()
  ->random();

$value = $target->element->value;
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

$target = Target::with('dimention', 'element.value.subValue', 'subElement')
  ->get()
  ->random();

$value = $target->element->value->first;
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

$target = Target::with('dimention', 'element.value.subValue', 'subElement')
  ->get()
  ->random();

$value = $target->element->value->first();
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

$target = Target::with('dimention', 'element.value.subValue', 'subElement')
  ->get()
  ->random();

$value = $target->element->value->first();
subValue = $value->subValue;
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

$target = Target::with('dimention', 'element.value.subValue', 'subElement')
  ->get()
  ->random();

$value = $target->element->value->first();
$subValue = $value->subValue;
use App\Enums\CategoryLegerEnum;
use App\Models\Leger;
use App\Enums\CurriculumEnum;
use App\Models\Competency;
use App\Models\Scopes\AcademicYearScope;
use App\Enums\SemesterEnum;
use App\Enums\PhaseEnum;
use App\Models\StudentCompetency;

$target = Target::with('dimention', 'element.value.subValue', 'subElement')
  ->get()
  ->random();

$value = $target->element->value->first();
$subValue = $value->subValue->first();
